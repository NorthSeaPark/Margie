Keep programming every day.
Make programming as a habit.
------------------------------------------------------------------------------------
Typedef:
typedef struct Books {
   char title[50];
   char author[50];
   char subject[100];
   int book_id;
} Book;
-------------------------------------------------------------------------------------

free, malloc, relloc fuctions

---------------------------------------------------------------------------------------
Insert node in order
|-----|     |-----|
|--2--|---->|--4--|
|-----|     |-----|
This is the basic situation
Case 1:
*if the next node of head is NULL or the the value of head is larger than the insert value
Then, we adjust
Case 2:
*if the next node of head is not NULL and the insert value is larger than the head
Then,
We loop the list_nodes until we find the nodes which is larger than the insert value (or we just directly go to the end)
----------------------------------------------------------------------------------------
function pointer example:

float multi (float num1, float num2){
	return num1 * num2;
}

typedef float(*pt2Func)(float, float);

Create a pointer points to multi

pt2Func *myFnPtr = &multi;

float result = (*myFnPtr)(2.0,5.1);
----------------------------------------------------------------------------------------
%p address of the pointer or any other variable
----------------------------------------------------------
void always means a pointer
-----------------------------------------------------------------------------------------
This how we compare the first n characters of the string in c
char str1[] = "asshole";
char str2[] = "bitch";
printf("%d\n", strncmp(str1, str2, 1));
-----------------------------------------------------------------------------------------
fprintf is used to write set of characters into the file
int main () {
	FILE * fp;
	fp = fopen ("file.txt", "w+");
	fprintf(fp, "%s %s %s %d", "We", "are", "in", 2012);
	fclose(fp);
	return(0);
}
fscanf is used to read from file
int main(){
	File * fp;
	fp = fopen("file.txt","r+");
	fscanf(fp,"%s",str1);
	fclose(fp);
	return(0);
}
-------------------------------------------------------------------------------------------
p1: p1.o libasteroids.h
	gcc -o p1 p1.o -L. -lasteroids -lncurses
p1.o: p1.c libasteroids.h
	gcc -ansi -pedantic -c p1.c

lab3.zip: Makefile lab3.c p1.c p2.c p3.c p4.c README_LAB3 libasteroids.h libasteroids.a
	zip lab3.zip Makefile lab3.c p1.c p2.c p3.c p4.c README_LAB3 libasteroids.h libasteroids.a

The name of Makefile should always named "Makefile"
--------------------------------------------------------------------------------------------
Command-line arguments are given after the name of the program in command-line shell of Operating Systems. To pass command line arguments, we typically define main() with two arguments : first argument is the number of command line arguments and second is list of command-line arguments.

int main(int argc, char *argv[]) { /* ... */ }
----------------------------------------------------------------------------------------------------
command for C++ on windows:
g++ card_prob.cpp -o card

关于那一个绝望又傻逼的演讲：

一些会提到的主题：
Arab Spring, Social Network, 社交网络对于人们的影响, consequencailism, Law of Nature
(1)讲述一下Arab Spring的背景
(2)介绍一下Whael的两篇演讲的不同
(3)引出我的问题：政府是否应该控制人们在网上的言论。
(4)现在引出正方还有反方
正方：言论自由的哲学本质，以及言论自由给社会带来的好处。
反方：law of nature, 康德，萨特，海德格尔
(5)政府对于言论的控制
5 rules on internet，暴徒算法
举例：香港事件
1.中国政府
2.西方媒体
(6)我的观点：应该控制
从而引出对于 一个社交网络 设计的思考
(7)总结

哲学元素：
康德： 将他人视为手段或者目的
哈马贝斯：工具性行动
戈夫曼：自我呈现理论
actants: 行动元
萨特：存在投射
海德格尔：共享世界
------------------------------------------------------------------------------------------------------------
CSE 5522
Office Hour: 
Wed: 3PM
Thurs: 1PM
Final:
4-6PM

HW2 Question 8 solved

Understand the KL formula

对了，我们再说说操蛋的Decision Tree
最重要的是entrophy

I(P(V1)to P(Vn)) = 1 to n SUM (-P(vi)log2P(vi))
Gain(T,X) = Entropy(T) - Entropy(T,X)

If the sample is completely homogeneous the entropy is zero
and if the sample is equally divided then it has entropy of one.

Information gain: The information gain is based on the derease in 
entropy after a data-set is split on an attribute. Decision tree need
to find the highest information gain

Step one: Calculate the entropy of the target

Step two:The resulting entropy is substracted from the entropy before the split

Choose the attribute with the largest information gain as decision node.
Divide the branch and repeat the same process.

那么回到C语言吧

if p is a pointer a data type T
the value of p is x_p (address)
then p+i has value x_p + L*i
L is the size of data type T
Thus, A[i] == *(A+i)
Let rdx holds starting address of array E
    rcx holds integer index i
C expression	type 		Assembly code
	E  			int*		moveq %rdx, %rax
	E[i] 		int 		movel(%rdx,%rcx,4), %eax
	&(E[i]) 	int*	    leaq(%rdx,%rcx,4), %rax
	E+i-1		int*		leaq -4(%rdx,%rcx,4), %rax
	*(E+i-3) 	int 		movl -12(%rdx,%rcx,4), %eax 	


Loop array for assembly codes

int size;
for(int i =0; i<size; i++){
	z[i]++;
}	

assembly: %rdi holds the address of z
-------------------------
moveq $0, %rax
jmp .L3
.L4:
  addl $1,(%rdi,%rax,4)
  addq $1,%rax
.L3:
  cmpq $4, %rax
  jle .L4
  ret
--------------------------
Allocate array
int data[20]
push %rbp
movq %rsp,%rbp
subq $80, %rsp
leaq (%rsp), %raxf
---------------------------
上一个春天

在上一个春天，
你还在我身边，
就站在车站前，
你我放弃了语言。

欺骗，
是最美的诗篇，
它延长了时间，
然后发现，
不是什么都只剩下一点。

在五月的某一天，
那片湖面又出现在公路前，
我背包里装的是，
接下来的夏天，
和被你长发拥抱的誓言。

只有放弃，
才能让我的胳膊深得更远，
在搂住地球的那一瞬间，
你就站在地铁口对面，
与我相隔三个月。

你被夏天宠爱的有些热烈，
不在意双脚离地面越来越远。
而我一头扎进湖底，
下面是上一个春天。
---------------------------------
pushq %rbp
movq %rsp, %rbp
subq $520, %rsp
pushq %rbx
leaq 8(%rsp), %rbx
movl $0x0, (%rbx)
---------------------------------
initialize:
pushq %rbp
movq %rsp, %rbp
subq $520, %rsp
pushq %rbx
leaq 8(%rsp), %rbx = leaq -520(%rbp), %rbx
movq $0, %rcx
init:
comq $130, %rcx
je next
movl $0, (%rbx,%rcx,4)
incq %rcx
jmp init
next:
---------------------------------
Return:
popq %rbx
movq %rbp, %rsp
popq %rbp
ret
// WE pop out callee regiester in reverse order
--------------------------------------------------
你那写的像屎一样的代码，三千年后就变成了古巴比伦的语言，放在博物馆里边。
--------------------------------------------------
if the elements are larger than 8 bytes
imulq $20, %rcx, %rax
--------------------------------------------------
Nested Array Row Access
A[i] is array of C elements
starting address = A + i*C*K
--------------------------------------------------
Array access
pgh:
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5

return pgh[index]
%rdi = index
leaq (%rdi,%rdi,4), %rax //5*index
leaq pgh(,%rax,4), %rax // phg + 20*index
--------------------------------------------------
Element access
A[i][j]
Address: A + i*c*k + j*k = A+k*(i*c+j)
leaq (%rdi,%rdi,4), %rax
addq %rsi, %rax
mov1 pgh(,%rax,4), %eax
---------------------------------------------------
Multi-level array
sb1 = {1,2,3}
sb2 = {4,5,6}
sb3 = {7,8,9}

int *sbs = {sb2,sb1,sb3}
return sbs[index][digit]

%rdi->index %rsi->digit
salq $2, %rsi
addq (,%rdi,8),%rsi
movl (%rsi), %eax
----------------------------------------------------
Linked list and assembly codes
struct rec{
	int a[4];
	int i;
	struct rec *next;
}
|a________________|i_____|next____|

0 				  16     24      32

void set_val(struct rec *r, int val)
{
	while(r){
		int i= r->i;
		r->a[i] = val;
		r = r->next;
	}
}

#movslq: sign extend 32bit to 64bit

.L1:
movslq 16(%rdi), %rax
movl %esi, (%rdi,%rax,4)
movq 24(%rdi), %rdi
testq %rdi, %rdi
jne .L1

#test reg,reg = cmp reg,$0
-----------------------------------
Aligned Data
Address must be multiple of K bytes

struct S1{
	char c;
	int i[2];
	double v;
} *p;

In this case, K = 8
due to the type of double
------------------------------------
1 byte: char
2 bytes: short
4 bytes: int,float
8 bytes: double, long, char*

struct S3{
	short i;
	float v;
	short j;
}a[10]

i (2 bytes) v j (2 bytes) = 12 bytes for 1 unit

short get_j(int idx)
{
	return a[idx].j
}

a+12*idx+8
movq (%rdx,%rdx,$2), %rax
movswl a+8(,%rax,$4), %eax
-------------------------------------
Saving Space:
Put large data type first
------------------------------------
关于*A **A ***A
代表指向的那一个元素
对于一个array A来说 *A就是第一个元素
----------------------------------------
Linking and Relocation

Linking: The process of collecting and combining various pieces of code and data in to a single file that can be loaded into memory and executed

Relocation: The process of adjusting addresses in object modules when the modules are linked with other modules

OS concepts:
Read only space: 
-read only data such as printf or scanf
-Code
Read-write space: data both read and write

Why Linkers?
Reason 1: Modularity
Written as a collection of smaller source files
Reason 2: Efficeincy
Time seperate compilation

What do Linkers do?
1: Symbol resolution: During symbol resolution step, the linker associates refrence with exactly one symbol definition
2: Relocation
Merge...single file
Relocate relative locations to final absolute memory
Updates all references

Three types:
Relocatable object file  Executable file Shared object file

ELF Object File Format
ELF header
Segment header table
.text section
.rodata section
.data section
.bss section
.symtab section
.rel .txt section
.res .data section
.debug section
Section header table

local non-static C variables: stored on the stack
local static C variables: stored in either .bss or .data

Duplicate Symbol definition:
Strong: procedured and initialized global
Weak: unintialized

*important linker's symbol rules
1. Multiple strong symbols are not allowed 
2. Given weak and strong, choose strong
References to the weak symbol resolve to the strong symbols
3. Given weak, arbituary choose

Examples:
int x;
p1{}      p1{}
//Two strong symbols

int x 		int x
p1			p2
//Two identical weak symbols

int x;		double x
int y;
//x in second program may override y

int x=7  	double x
int y=5
//x in second program will override y

use static 	initialize if you defina a globel variable  use extern

Packaging Commonly:
Option 1: Put all functions in a single source file
Link big object file into their programmers

Option 2: each functio in seperate source file

Shared Library and Dynamic linking

Linking: technique that allows programms to be constructed from
multiple object files

Linking can happan at different times:
Compile, Load, Run







