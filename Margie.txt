Keep programming every day.
Make programming as a habit.
------------------------------------------------------------------------------------
Typedef:
typedef struct Books {
   char title[50];
   char author[50];
   char subject[100];
   int book_id;
} Book;
-------------------------------------------------------------------------------------

free, malloc, relloc fuctions

---------------------------------------------------------------------------------------
Insert node in order
|-----|     |-----|
|--2--|---->|--4--|
|-----|     |-----|
This is the basic situation
Case 1:
*if the next node of head is NULL or the the value of head is larger than the insert value
Then, we adjust
Case 2:
*if the next node of head is not NULL and the insert value is larger than the head
Then,
We loop the list_nodes until we find the nodes which is larger than the insert value (or we just directly go to the end)
----------------------------------------------------------------------------------------
function pointer example:

float multi (float num1, float num2){
	return num1 * num2;
}

typedef float(*pt2Func)(float, float);

Create a pointer points to multi

pt2Func *myFnPtr = &multi;

float result = (*myFnPtr)(2.0,5.1);
----------------------------------------------------------------------------------------
%p address of the pointer or any other variable
----------------------------------------------------------
void always means a pointer
-----------------------------------------------------------------------------------------
This how we compare the first n characters of the string in c
char str1[] = "asshole";
char str2[] = "bitch";
printf("%d\n", strncmp(str1, str2, 1));
-----------------------------------------------------------------------------------------
fprintf is used to write set of characters into the file
int main () {
	FILE * fp;
	fp = fopen ("file.txt", "w+");
	fprintf(fp, "%s %s %s %d", "We", "are", "in", 2012);
	fclose(fp);
	return(0);
}
fscanf is used to read from file
int main(){
	File * fp;
	fp = fopen("file.txt","r+");
	fscanf(fp,"%s",str1);
	fclose(fp);
	return(0);
}
-------------------------------------------------------------------------------------------
p1: p1.o libasteroids.h
	gcc -o p1 p1.o -L. -lasteroids -lncurses
p1.o: p1.c libasteroids.h
	gcc -ansi -pedantic -c p1.c

lab3.zip: Makefile lab3.c p1.c p2.c p3.c p4.c README_LAB3 libasteroids.h libasteroids.a
	zip lab3.zip Makefile lab3.c p1.c p2.c p3.c p4.c README_LAB3 libasteroids.h libasteroids.a
--------------------------------------------------------------------------------------------
Command-line arguments are given after the name of the program in command-line shell of Operating Systems. To pass command line arguments, we typically define main() with two arguments : first argument is the number of command line arguments and second is list of command-line arguments.

int main(int argc, char *argv[]) { /* ... */ }



